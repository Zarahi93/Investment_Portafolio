<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sign Up - Quantia</title>
    <link rel="stylesheet" href="/styles/login-register.css">
    <style>
        /* Estilos para mensajes */
        .alert {
            padding: 12px 16px;
            border-radius: 8px;
            margin: 15px 0;
            font-size: 14px;
            display: none;
            max-width: 400px;
            margin-left: auto;
            margin-right: auto;
        }
        
        .alert-error {
            background-color: #fee;
            border: 1px solid #fcc;
            color: #c33;
        }
        
        .alert-success {
            background-color: #efe;
            border: 1px solid #cfc;
            color: #363;
        }
        
        .alert-warning {
            background-color: #ffd;
            border: 1px solid #ffc;
            color: #663;
        }
    </style>
    <link href='https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css' rel='stylesheet'>
</head>
<body>
    
    <header class="header">
        <div class="logo"><a href="/">Quantia</a></div>
    </header>
    
    <main>
        <div class="wrapper">
            <!-- Contenedor para mensajes -->
            <div id="messageContainer"></div>
            
            <form id="registerForm">
                <h1>Sign Up</h1>
                
                <div class="input-box">
                    <input type="text" id="reg-username" placeholder="Username" required>
                    <i class='bx bxs-user'></i>
                </div>
                
                <div class="input-box">
                    <input type="password" id="reg-password" placeholder="Password" required>
                    <i class='bx bxs-lock-alt'></i>
                </div>

                <div class="input-box">
                    <input type="email" id="reg-email" placeholder="Email" required>
                    <i class='bx bxs-envelope'></i>
                </div>

                <button type="submit" class="btn">Sign Up</button>

                <div class="register-link">
                    <p>Already have an account? <a href="/login">Log In</a></p>
                </div>
            </form>
        </div>
    </main>
<script>
// Prevenir envío tradicional del formulario
document.getElementById('registerForm').addEventListener('submit', function(e) {
    e.preventDefault();
    registerUser();
});

function showMessage(message, type = 'error') {
    const container = document.getElementById('messageContainer');
    container.innerHTML = `
        <div class="alert alert-${type}">
            ${message}
        </div>
    `;
    container.style.display = 'block';
    
    // Auto-ocultar después de 5 segundos
    setTimeout(() => {
        container.style.display = 'none';
    }, 5000);
}

function clearMessages() {
    const container = document.getElementById('messageContainer');
    container.innerHTML = '';
    container.style.display = 'none';
}

async function registerUser() {
    const username = document.getElementById('reg-username').value;
    const password = document.getElementById('reg-password').value;
    const email = document.getElementById('reg-email').value;
    
    clearMessages();
    
    // Validación básica del frontend
    if (!username || !password || !email) {
        showMessage('Please fill in all fields');
        return;
    }
    
    // Validación de email
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(email)) {
        showMessage('Please enter a valid email address');
        return;
    }
    
    // Validación de password
    if (password.length < 6) {
        showMessage('Password must be at least 6 characters long');
        return;
    }

    try {
        const response = await fetch('/db/register', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ username, password, email })
        });

        const data = await response.json();
        console.log('Response data:', data); // Para debugging
        
        // CAMBIO IMPORTANTE: Verificar por status code en lugar de data.success
        if (response.ok) {
            showMessage('Registration successful! Redirecting...', 'success');
            
            // Redirigir después de un breve delay
            setTimeout(() => {
                if (data.sessionCreated) {
                    window.location.href = '/';
                } else {
                    window.location.href = '/login';
                }
            }, 1500);
            
        } else {
            // Mostrar mensaje de error específico del backend
            if (data.conflict) {
                if (data.conflict.username && data.conflict.email) {
                    showMessage('Username and email are already registered');
                } else if (data.conflict.username) {
                    showMessage('Username is already taken');
                } else if (data.conflict.email) {
                    showMessage('Email is already registered');
                } else {
                    showMessage(data.message || 'Registration failed');
                }
            } else {
                showMessage(data.message || data.error || 'Registration failed');
            }
        }
        
    } catch (error) {
        console.error('Registration error:', error);
        showMessage('Network error. Please try again.');
    }
}

// También permitir registro con Enter key
document.addEventListener('keypress', function(e) {
    if (e.key === 'Enter') {
        registerUser();
    }
});
</script>
</body>
</html>