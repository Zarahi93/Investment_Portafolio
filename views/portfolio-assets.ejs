<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Portfolio</title>
    <style>
        /* (Todos tus estilos CSS anteriores aqu√≠) */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #0f172a 0%, #1e293b 50%, #0f172a 100%);
            color: #f8fafc;
            min-height: 100vh;
            line-height: 1.6;
        }

        /* Header Styles */
        .header {
            background: rgba(15, 23, 42, 0.9);
            backdrop-filter: blur(20px);
            border-bottom: 1px solid rgba(148, 163, 184, 0.1);
            padding: 1rem 0;
            position: sticky;
            top: 0;
            z-index: 100;
            box-shadow: 0 4px 24px rgba(0, 0, 0, 0.1);
        }

        .nav-container {
            max-width: 1400px;
            margin: 0 auto;
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0 2rem;
        }

        .logo {
            font-size: 1.75rem;
            font-weight: 800;
            background: linear-gradient(135deg, #06b6d4, #3b82f6, #8b5cf6);
            background-size: 200% 200%;
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            animation: gradientShift 4s ease-in-out infinite;
        }

        @keyframes gradientShift {
            0%, 100% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
        }

        .nav-menu {
            display: flex;
            gap: 2rem;
            align-items: center;
        }

        .nav-link {
            color: #cbd5e1;
            text-decoration: none;
            font-weight: 500;
            font-size: 0.875rem;
            transition: all 0.3s ease;
            padding: 0.5rem 1rem;
            border-radius: 0.75rem;
            position: relative;
        }

        .nav-link:hover,
        .nav-link.active {
            color: #06b6d4;
            background: rgba(6, 182, 212, 0.1);
        }

        .user-profile {
            display: flex;
            align-items: center;
            gap: 0.75rem;
            padding: 0.5rem 1rem;
            background: rgba(148, 163, 184, 0.1);
            border-radius: 1rem;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .user-profile:hover {
            background: rgba(148, 163, 184, 0.15);
            transform: translateY(-1px);
        }

        .user-avatar {
            width: 2rem;
            height: 2rem;
            border-radius: 50%;
            background: linear-gradient(135deg, #06b6d4, #3b82f6);
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: 600;
            font-size: 0.875rem;
            color: white;
        }

        /* Main Container */
        .main-container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 2rem;
        }

        .portfolio-header {
            margin-bottom: 2.5rem;
        }

        .portfolio-title {
            font-size: 2.5rem;
            font-weight: 800;
            margin-bottom: 0.5rem;
            background: linear-gradient(135deg, #06b6d4, #3b82f6, #8b5cf6);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        .portfolio-subtitle {
            font-size: 1.125rem;
            color: #94a3b8;
            margin-bottom: 2rem;
        }

        /* Stats Grid */
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
            gap: 1.5rem;
            margin-bottom: 2rem;
        }

        .stat-card {
            background: rgba(148, 163, 184, 0.05);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(148, 163, 184, 0.1);
            border-radius: 1rem;
            padding: 1.5rem;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }

        .stat-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 2px;
            /* background: linear-gradient(90deg, #06b6d4, #3b82f6, #8b5cf6); */
        }

        .stat-card:hover {
            transform: translateY(-4px);
            background: rgba(148, 163, 184, 0.08);
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.2);
        }

        .stat-label {
            font-size: 0.75rem;
            color: #94a3b8;
            text-transform: uppercase;
            letter-spacing: 1px;
            font-weight: 600;
            margin-bottom: 0.5rem;
        }

        .stat-value {
            font-size: 2rem;
            font-weight: 700;
            color: #f8fafc;
            margin-bottom: 0.5rem;
            line-height: 1;
        }

        .stat-change {
            font-size: 0.875rem;
            font-weight: 600;
        }

        .positive { color: #10b981; }
        .negative { color: #ef4444; }
        .neutral { color: #6b7280; }

        /* Action Buttons */
        .actions-bar {
            display: flex;
            gap: 1rem;
            margin-bottom: 2rem;
            flex-wrap: wrap;
        }

        .btn {
            padding: 0.75rem 1.5rem;
            border: none;
            border-radius: 0.75rem;
            font-size: 0.875rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
        }

        .btn-primary {
            background: linear-gradient(135deg, #06b6d4, #3b82f6);
            color: white;
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 12px 24px rgba(6, 182, 212, 0.3);
        }

        .btn-secondary {
            background: rgba(148, 163, 184, 0.1);
            color: #cbd5e1;
            border: 1px solid rgba(148, 163, 184, 0.2);
        }

        .btn-secondary:hover {
            background: rgba(148, 163, 184, 0.15);
            transform: translateY(-2px);
        }

        /* Filters */
        .filters-bar {
            display: flex;
            gap: 1.5rem;
            margin-bottom: 2rem;
            align-items: center;
            flex-wrap: wrap;
        }

        .filter-group {
            display: flex;
            align-items: center;
            gap: 0.75rem;
        }

        .filter-label {
            font-size: 0.875rem;
            color: #94a3b8;
            font-weight: 600;
            white-space: nowrap;
        }

        .filter-select {
            padding: 0.5rem 0.75rem;
            background: rgba(148, 163, 184, 0.1);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(148, 163, 184, 0.2);
            border-radius: 0.5rem;
            color: #f8fafc;
            font-size: 0.875rem;
            cursor: pointer;
            transition: all 0.3s ease;
            outline: none;
        }

        .filter-select:hover,
        .filter-select:focus {
            background: rgba(148, 163, 184, 0.15);
            border-color: rgba(6, 182, 212, 0.5);
        }

        .filter-select option {
            background: #1e293b;
            color: #f8fafc;
        }

        /* Investments Section */
        .investments-section {
            background: rgba(148, 163, 184, 0.05);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(148, 163, 184, 0.1);
            border-radius: 1rem;
            overflow: hidden;
        }

        .section-header {
            background: rgba(148, 163, 184, 0.08);
            padding: 1.5rem;
            border-bottom: 1px solid rgba(148, 163, 184, 0.1);
        }

        .section-title {
            font-size: 1.25rem;
            font-weight: 600;
            color: #f8fafc;
        }

        .table-container {
            overflow-x: auto;
        }

        .investments-table {
            width: 100%;
            border-collapse: collapse;
        }

        .table-header {
            background: rgba(148, 163, 184, 0.08);
        }

        .table-header th {
            padding: 1rem 1.5rem;
            text-align: left;
            font-size: 0.75rem;
            color: #94a3b8;
            text-transform: uppercase;
            letter-spacing: 1px;
            font-weight: 600;
            border-bottom: 1px solid rgba(148, 163, 184, 0.1);
        }

        .table-row {
            border-bottom: 1px solid rgba(148, 163, 184, 0.05);
            transition: all 0.3s ease;
        }

        .table-row:hover {
            background: rgba(148, 163, 184, 0.05);
        }

        .table-cell {
            padding: 1.25rem 1.5rem;
            vertical-align: middle;
        }

        /* Asset Info */
        .asset-info {
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .asset-icon {
            width: 2.5rem;
            height: 2.5rem;
            border-radius: 50%;
            background: linear-gradient(135deg, #06b6d4, #3b82f6);
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 0.875rem;
            font-weight: 700;
            color: white;
        }

        .asset-details h4 {
            font-size: 0.875rem;
            font-weight: 600;
            color: #f8fafc;
            margin-bottom: 0.25rem;
        }

        .asset-details span {
            font-size: 0.75rem;
            color: #94a3b8;
        }

        /* Price Info */
        .price-info {
            text-align: right;
        }

        .current-price {
            font-size: 0.875rem;
            font-weight: 600;
            color: #f8fafc;
            margin-bottom: 0.25rem;
        }

        .price-change {
            font-size: 0.75rem;
            font-weight: 500;
        }

        /* Quantity Info */
        .quantity-info {
            text-align: center;
        }

        .quantity-main {
            font-size: 0.875rem;
            font-weight: 600;
            color: #f8fafc;
            margin-bottom: 0.25rem;
        }

        .quantity-sub {
            font-size: 0.75rem;
            color: #94a3b8;
        }

        .value-cell {
            font-size: 0.875rem;
            font-weight: 600;
            color: #f8fafc;
        }

        .percentage-cell {
            font-size: 0.875rem;
            font-weight: 600;
            text-align: center;
            color: #f8fafc;
        }

        .gain-cell {
            text-align: right;
        }

        .gain-main {
            font-size: 0.875rem;
            font-weight: 600;
            margin-bottom: 0.25rem;
        }

        .gain-percent {
            font-size: 0.75rem;
            font-weight: 500;
        }

        /* Action Buttons */
        .actions-cell {
            text-align: right;
        }

        .action-btn {
            padding: 0.5rem 1rem;
            border-radius: 0.5rem;
            border: none;
            font-size: 0.75rem;
            font-weight: 600;
            cursor: pointer;
            margin-left: 0.5rem;
            transition: all 0.2s ease;
        }

        .btn-edit {
            background: rgba(6, 182, 212, 0.2);
            color: #06b6d4;
        }

        .btn-edit:hover {
            background: rgba(6, 182, 212, 0.3);
            transform: translateY(-1px);
        }

        .btn-sell {
            background: rgba(239, 68, 68, 0.2);
            color: #ef4444;
        }

        .btn-sell:hover {
            background: rgba(239, 68, 68, 0.3);
            transform: translateY(-1px);
        }

        /* Loading and Empty States */
        .loading {
            text-align: center;
            padding: 4rem 1.5rem;
            color: #94a3b8;
        }

        .spinner {
            width: 2.5rem;
            height: 2.5rem;
            border: 3px solid rgba(148, 163, 184, 0.2);
            border-top: 3px solid #06b6d4;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin: 0 auto 1.5rem;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .empty-state {
            text-align: center;
            padding: 4rem 1.5rem;
            color: #94a3b8;
        }

        .empty-icon {
            font-size: 3rem;
            margin-bottom: 1rem;
            opacity: 0.6;
        }

        /* Floating Background Elements */
        .floating-elements {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            z-index: -1;
            overflow: hidden;
        }

        .floating-circle {
            position: absolute;
            border-radius: 50%;
            background: linear-gradient(135deg, rgba(6, 182, 212, 0.1), rgba(59, 130, 246, 0.1));
            animation: float 20s infinite linear;
        }

        .circle1 {
            width: 5rem;
            height: 5rem;
            top: 15%;
            right: 15%;
            animation-delay: 0s;
        }

        .circle2 {
            width: 7.5rem;
            height: 7.5rem;
            bottom: 20%;
            left: 10%;
            animation-delay: -7s;
        }

        .circle3 {
            width: 3.75rem;
            height: 3.75rem;
            top: 40%;
            left: 80%;
            animation-delay: -3s;
        }

        @keyframes float {
            0% { transform: translateY(0px) rotate(0deg); opacity: 0.3; }
            50% { transform: translateY(-20px) rotate(180deg); opacity: 0.1; }
            100% { transform: translateY(0px) rotate(360deg); opacity: 0.3; }
        }

        /* Responsive Design */
        @media (max-width: 1024px) {
            .nav-container {
                padding: 0 1rem;
            }

            .main-container {
                padding: 1.5rem;
            }

            .stats-grid {
                grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
                gap: 1rem;
            }
        }

        @media (max-width: 768px) {
            .nav-container {
                flex-direction: column;
                gap: 1rem;
            }

            .nav-menu {
                gap: 1rem;
                flex-wrap: wrap;
                justify-content: center;
            }

            .portfolio-title {
                font-size: 2rem;
            }

            .stats-grid {
                grid-template-columns: 1fr;
            }

            .actions-bar,
            .filters-bar {
                flex-direction: column;
                align-items: stretch;
            }

            .filter-group {
                flex-direction: column;
                align-items: stretch;
                gap: 0.5rem;
            }

            .table-container {
                font-size: 0.75rem;
            }

            .table-cell {
                padding: 1rem 0.75rem;
            }

            .asset-icon {
                width: 2rem;
                height: 2rem;
                font-size: 0.75rem;
            }

            .nav-link {
                padding: 0.5rem;
            }
        }

        @media (max-width: 480px) {
            .main-container {
                padding: 1rem;
            }

            .portfolio-title {
                font-size: 1.75rem;
            }

            .stat-value {
                font-size: 1.5rem;
            }

            .btn {
                padding: 0.625rem 1rem;
                font-size: 0.75rem;
            }
        }
        /* Estilos para el modal */
        .modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.7);
            backdrop-filter: blur(5px);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
            opacity: 0;
            visibility: hidden;
            transition: all 0.3s ease;
            overflow: scroll;
        }

        .modal-overlay.active {
            opacity: 1;
            visibility: visible;
        }

        .modal {
            background: linear-gradient(135deg, #1e293b 0%, #334155 100%);
            border: 1px solid rgba(148, 163, 184, 0.2);
            border-radius: 1rem;
            padding: 2rem;
            width: 90%;
            max-width: 500px;
            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
            transform: translateY(-50px);
            transition: all 0.3s ease;
        }

        .modal-overlay.active .modal {
            transform: translateY(0);
        }

        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.5rem;
            padding-bottom: 1rem;
            border-bottom: 1px solid rgba(148, 163, 184, 0.2);
        }

        .modal-title {
            font-size: 1.5rem;
            font-weight: 600;
            color: #f8fafc;
        }

        .modal-close {
            background: none;
            border: none;
            color: #94a3b8;
            font-size: 1.5rem;
            cursor: pointer;
            padding: 0;
            width: 30px;
            height: 30px;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 50%;
            transition: all 0.3s ease;
        }

        .modal-close:hover {
            background: rgba(239, 68, 68, 0.2);
            color: #ef4444;
        }

        .asset-info-modal {
            display: flex;
            align-items: center;
            gap: 1rem;
            margin-bottom: 1.5rem;
            padding: 1rem;
            background: rgba(148, 163, 184, 0.1);
            border-radius: 0.75rem;
        }

        .asset-icon-modal {
            width: 3rem;
            height: 3rem;
            border-radius: 50%;
            background: linear-gradient(135deg, #06b6d4, #3b82f6);
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1rem;
            font-weight: 700;
            color: white;
        }

        .asset-details-modal h3 {
            font-size: 1.1rem;
            font-weight: 600;
            color: #f8fafc;
            margin-bottom: 0.25rem;
        }

        .asset-details-modal span {
            font-size: 0.9rem;
            color: #94a3b8;
        }

        .price-info-modal {
            background: rgba(148, 163, 184, 0.1);
            padding: 1rem;
            border-radius: 0.75rem;
            margin-bottom: 1.5rem;
        }

        .price-row {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 0.5rem;
        }

        .price-label {
            color: #94a3b8;
            font-size: 0.9rem;
        }

        .price-value {
            font-weight: 600;
            color: #f8fafc;
        }

        .price-change-positive {
            color: #10b981;
        }

        .price-change-negative {
            color: #ef4444;
        }

        .form-group {
            margin-bottom: 1.5rem;
        }

        .form-label {
            display: block;
            margin-bottom: 0.5rem;
            color: #f8fafc;
            font-weight: 600;
            font-size: 0.9rem;
        }

        .form-input {
            width: 100%;
            padding: 0.75rem;
            background: rgba(148, 163, 184, 0.1);
            border: 1px solid rgba(148, 163, 184, 0.2);
            border-radius: 0.5rem;
            color: #f8fafc;
            font-size: 1rem;
            transition: all 0.3s ease;
        }

        .form-input:focus {
            outline: none;
            border-color: #06b6d4;
            background: rgba(148, 163, 184, 0.15);
        }

        .calculation-result {
            background: rgba(148, 163, 184, 0.1);
            padding: 1rem;
            border-radius: 0.75rem;
            margin-bottom: 1.5rem;
        }

        .calculation-row {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 0.5rem;
        }

        .calculation-label {
            color: #94a3b8;
            font-size: 0.9rem;
        }

        .calculation-value {
            font-weight: 600;
            color: #f8fafc;
        }

        .modal-actions {
            display: flex;
            gap: 1rem;
            justify-content: flex-end;
        }

        .btn-modal {
            padding: 0.75rem 1.5rem;
            border: none;
            border-radius: 0.75rem;
            font-size: 0.9rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .btn-modal-primary {
            background: linear-gradient(135deg, #06b6d4, #3b82f6);
            color: white;
        }

        .btn-modal-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 20px rgba(6, 182, 212, 0.3);
        }

        .btn-modal-secondary {
            background: rgba(148, 163, 184, 0.1);
            color: #cbd5e1;
            border: 1px solid rgba(148, 163, 184, 0.2);
        }

        .btn-modal-secondary:hover {
            background: rgba(148, 163, 184, 0.15);
        }

        .loading-modal {
            text-align: center;
            padding: 2rem;
            color: #94a3b8;
        }

        .spinner-modal {
            width: 2rem;
            height: 2rem;
            border: 2px solid rgba(148, 163, 184, 0.2);
            border-top: 2px solid #06b6d4;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin: 0 auto 1rem;
        }
    </style>
    <link rel="stylesheet" href="/styles/menu.css">
</head>
<body>
    <div class="floating-elements">
        <div class="floating-circle circle1"></div>
        <div class="floating-circle circle2"></div>
        <div class="floating-circle circle3"></div>
    </div>

    <header class="header">
        <div class="nav-container">
            <div class="logo"><a href="/">Quantia</a></div>
            <nav>
                <ul class="nav-menu">
                    <li><a href="/market">Market</a></li>
                    <li><a href="/balance">Balance</a></li>
                    <li><a href="/port-selector" class="active">Portfolio</a></li>
                    <li><a href="/analyse">Analysis</a></li>
                </ul>
            </nav>
            
            <div class="user-profile" onclick="toggleUserMenu(event)">
                <div class="user-avatar" id="userAvatar">
                    <%= user.username ? user.username.substring(0, 2).toUpperCase() : 'US' %>
                </div>
                <span id="usernameDisplay"><%= user.username || 'Usuario' %></span>
                
                <div class="dropdown-menu" id="userDropdown">
                    <div class="menu-header">
                        <div class="avatar"><%= user.username ? user.username.substring(0, 2).toUpperCase() : 'US' %></div>
                        <h3><%= user.username || 'Usuario' %></h3>
                        <p><%= user.email || 'usuario@email.com' %></p>
                    </div>
                    
                    <div class="menu-items">
                        <div class="menu-item" onclick="handleMenuClick('profile')">
                            <span>üë§</span>
                            Profile
                        </div>
                        
                        <div class="menu-item" onclick="handleMenuClick('settings')">
                            <span>‚öôÔ∏è</span>
                            Settings
                        </div>
                        
                        <div class="menu-item" onclick="handleMenuClick('help')">
                            <span>‚ùì</span>
                            Help
                        </div>
                        
                        <div class="menu-divider"></div>
                        
                        <div class="menu-item logout" onclick="handleMenuClick('logout')">
                            <span>üö™</span>
                            Log Out
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </header>

    <div class="main-container">
        <h1 class="portfolio-title">Portfolio</h1>
        <p class="portfolio-subtitle">Manage and monitor your investments in real time</p>
        <h1 class="portfolio-title">My Portfolio</h1>
        <p class="portfolio-subtitle">Manage and monitor your investments in real time</p>
        <div id="content">
            <div class="loading">
                <div class="spinner"></div>
                <p>Loading portfolio data...</p>
            </div>
        </div>
    </div>

    <!-- Modal para comprar/vender -->
    <div class="modal-overlay" id="tradeModal">
        <div class="modal">
            <div class="modal-header">
                <h2 class="modal-title" id="modalTitle">Operation</h2>
                <button class="modal-close" onclick="closeModal()">&times;</button>
            </div>
            
            <div id="modalContent">
                <div class="loading-modal">
                    <div class="spinner-modal"></div>
                    <p>Loading data...</p>
                </div>
            </div>
        </div>
    </div>

    <script>
        const portfolioId = <%- JSON.stringify(portfolioId) %>;
        console.log('Portfolio ID:', portfolioId);
        let currentUser = <%- JSON.stringify(user || null) %>;
        const userId = currentUser.id;
        let globalQuantity = 0;
                let totalTrade = 0;

        let portfolioData = null;
        let assets = [];
        let assetPrices = {};
        let currentSymbol = '';
        let currentAction = '';
        let currentUserData = null;

        // Funciones del modal
        function openModal() {
            document.getElementById('tradeModal').classList.add('active');
            document.body.style.overflow = 'hidden';
        }

        function closeModal() {
            document.getElementById('tradeModal').classList.remove('active');
            document.body.style.overflow = 'auto';
        }

        async function buy(symbol, quantity) {
            currentSymbol = symbol;
            currentAction = 'buy';
            globalQuantity = quantity;
            openModal();
            await loadAssetData(symbol, quantity);
        }

        async function sell(symbol, quantity) {
            currentSymbol = symbol;
            currentAction = 'sell';
            globalQuantity = quantity;

            openModal();
            await loadAssetData(symbol, quantity);
        }

        async function loadAssetData(symbol, quantity) {
            try {
                document.getElementById('modalTitle').textContent = currentAction === 'buy' ? 'Buy ' + symbol : 'Sell ' + symbol;
                
                // Obtener datos del precio del activo
                const priceResponse = await fetch(`http://localhost:5000/api/price/${symbol}`);
                if (!priceResponse.ok) {
                    throw new Error('Error al obtener datos del activo');
                }
                const priceData = await priceResponse.json();
                
                // Obtener datos del usuario
                const userResponse = await fetch(`http://localhost:5000/db/user/${userId}`);
                if (!userResponse.ok) {
                    throw new Error('Error getting user data');
                }
                const userData = await userResponse.json();
                
                currentUserData = userData.data;
                
                renderTradeModal(priceData, userData.data, quantity);
                
            } catch (error) {
                document.getElementById('modalContent').innerHTML = `
                    <div class="loading-modal">
                        <div style="color: #ef4444; font-size: 2rem;">‚ö†Ô∏è</div>
                        <p>Error: ${error.message}</p>
                        <button class="btn-modal btn-modal-secondary" onclick="closeModal()">Cerrar</button>
                    </div>
                `;
            }
        }

        let globalBalance = 0;

        function renderTradeModal(priceData, userData, quantity) {
            const isBuy = currentAction === 'buy';
            const actionText = isBuy ? 'Comprar' : 'Vender';
            // globalQuantity = quantity;
            globalBalance = userData.balance;
            totalTrade = priceData.currentPrice;
            
            
            document.getElementById('modalContent').innerHTML = `
                <div class="asset-info-modal">
                    <div class="asset-icon-modal">${getAssetIcon(priceData.symbol)}</div>
                    <div class="asset-details-modal">
                        <h3>${priceData.name}</h3>
                        <span>${priceData.symbol} ‚Ä¢ ${priceData.currency}</span>
                    </div>
                </div>

                <div class="price-info-modal">
                    <div class="price-row">
                        <span class="price-label">Current Price:</span>
                        <span class="price-value">${formatCurrency(priceData.currentPrice)}</span>
                    </div>
                    <div class="price-row">
                        <span class="price-label">Change:</span>
                        <span class="price-value ${getChangeClass(priceData.change)}">
                            ${formatCurrency(priceData.change)} (${formatPercentage(priceData.changePercent)})
                        </span>
                    </div>
                    <div class="price-row">
                        <span class="price-label">Last close price:</span>
                        <span class="price-value">${formatCurrency(priceData.previousClose)}</span>
                    </div>
                    <div class="price-row">
                        <span class="price-label">Market status:</span>
                        <span class="price-value">${priceData.isMarketOpen ? 'üü¢ Abierto' : 'üî¥ Cerrado'}</span>
                    </div>
                </div>

                <div class="price-info-modal">
                    <div class="price-row">
                        <span class="price-label">Available balance:</span>
                        <span class="price-value">${formatCurrency(userData.balance)}</span>
                    </div>
                    <div class="price-row">
                        <span class="price-label">Quantity:</span>
                        <span class="price-value">${globalQuantity}</span>
                    </div>
                </div>

                <div class="form-group">
                    <label class="form-label" for="quantity">Quantity to ${actionText.toLowerCase()}:</label>
                    <input type="number" id="quantity" class="form-input" min="1" step="1" value="1" 
                           oninput="calculateTotal(${priceData.currentPrice})" placeholder="Enter the amount">
                </div>

                <div class="calculation-result">
                    <div class="calculation-row">
                        <span class="calculation-label">Unit Price:</span>
                        <span class="calculation-value">${formatCurrency(priceData.currentPrice)}</span>
                    </div>
                    <div class="calculation-row">
                        <span class="calculation-label">Estimated total:</span>
                        <span class="calculation-value" id="totalAmount">${formatCurrency(priceData.currentPrice)}</span>
                    </div>
                    <div class="calculation-row">
                        <span class="calculation-label">Commissions:</span>
                        <span class="calculation-value">${formatCurrency(0)}</span>
                    </div>
                    <div class="calculation-row" style="margin-top: 0.5rem; padding-top: 0.5rem; border-top: 1px solid rgba(148, 163, 184, 0.2);">
                        <span class="calculation-label" style="font-weight: 600;">Final total:</span>
                        <span class="calculation-value" style="font-weight: 700;" id="finalAmount">${formatCurrency(priceData.currentPrice)}</span>
                    </div>
                </div>

                <div class="modal-actions">
                    <button class="btn-modal btn-modal-secondary" onclick="closeModal()">Cancel</button>
                    <button class="btn-modal btn-modal-primary" onclick="executeTrade()">
                        ${actionText} Now
                    </button>
                </div>
            `;
        }



        function calculateTotal(pricePerUnit) {
            const quantity = parseInt(document.getElementById('quantity').value) || 0;
            const total = quantity * pricePerUnit;
            totalTrade = total;
            document.getElementById('totalAmount').textContent = formatCurrency(total);
            document.getElementById('finalAmount').textContent = formatCurrency(total);
        }

        async function executeTrade() {
            const quantity = parseInt(document.getElementById('quantity').value) || 0;
            if (quantity <= 0) {
                alert('Please enter a valid amount');
                return;
            } else if(currentAction == "sell" && quantity > globalQuantity){
                alert("You cannot sell more assets than you own");
                return;
            } else if(currentAction == "buy" && totalTrade > globalBalance){
                alert("You do not have enough balance for this operation");
                return;
            }

             
    try {
        console.log(JSON.stringify({
                userId: userId, // ID del usuario actual
                portfolioId: portfolioId,
                assetSymbol: currentSymbol,
                quantity: quantity,
                price: parseFloat(totalTrade) // Convertir a n√∫mero
            }));
        // CORRECCI√ìN: A√±adir / antes de la ruta del endpoint
        const endpoint = currentAction === 'buy' ? '/db/buy-asset' : '/db/sell-asset';
        
        const response = await fetch(endpoint, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            // CORRECCI√ìN: Asegurar que price es un n√∫mero, no un string
            body: JSON.stringify({
                userId: userId, // ID del usuario actual
                portfolioId: portfolioId,
                assetSymbol: currentSymbol,
                quantity: quantity,
                price: parseFloat(totalTrade) // Convertir a n√∫mero
            })
        });

        // CORRECCI√ìN: Manejar mejor los errores HTTP
        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.error || `Error ${response.status}: ${response.statusText}`);
        }

        const result = await response.json();

        if (result.success) {
            // Transacci√≥n exitosa
            document.getElementById('modalContent').innerHTML = `
                <div style="text-align: center; padding: 2rem;">
                    <div style="font-size: 3rem; color: #10b981; margin-bottom: 1rem;">‚úÖ</div>
                    <h3 style="color: #f8fafc; margin-bottom: 1rem;">${currentAction === 'buy' ? 'Buy' : 'Sell'} Successful</h3>
                    <p style="color: #94a3b8; margin-bottom: 1.5rem;">
                        ${result.message}<br>
                        ${quantity} stocks of ${currentSymbol} for ${formatCurrency(totalTrade)}
                    </p>
                    <button class="btn-modal btn-modal-primary" onclick="closeModalAndRefresh()">Done</button>
                </div>
            `;
            
            // Actualizar datos del usuario despu√©s de la transacci√≥n
            location.reload();
        } else {
            // Error en la transacci√≥n
            throw new Error(result.error || 'Unknown error in the transaction');
        }
    } catch (error) {
        console.error('Transaction error:', error);
        document.getElementById('modalContent').innerHTML = `
            <div style="text-align: center; padding: 2rem;">
                <div style="font-size: 3rem; color: #ef4444; margin-bottom: 1rem;">‚ùå</div>
                <h3 style="color: #f8fafc; margin-bottom: 1rem;">Transaction error:</h3>
                <p style="color: #94a3b8; margin-bottom: 1.5rem;">${error.message}</p>
                <div class="modal-actions">
                    <button class="btn-modal btn-modal-secondary" onclick="closeModal()">Cancel</button>
                    <button class="btn-modal btn-modal-primary" onclick="executeTrade()">Retry</button>
                </div>
            </div>
        `;
    }


            

            
            // const action = currentAction === 'buy' ? 'compra' : 'venta';
            // alert(`‚úÖ ${action.toUpperCase()} EJECUTADA\nS√≠mbolo: ${currentSymbol}\nCantidad: ${quantity}\n\nLa operaci√≥n se ha completado exitosamente.`);
            
            // closeModal();
            // Aqu√≠ puedes agregar la l√≥gica para enviar la orden al servidor
        }

        // Cerrar modal al hacer clic fuera
        document.getElementById('tradeModal').addEventListener('click', function(e) {
            if (e.target === this) {
                closeModal();
            }
        });

        // Funciones de utilidad
        function formatCurrency(amount) {
            return '$' + new Intl.NumberFormat('en-US', {
                minimumFractionDigits: 2,
                maximumFractionDigits: 2
            }).format(amount);
        }

        function formatPercentage(value) {
            const num = parseFloat(value);
            const sign = num >= 0 ? '+' : '';
            return sign + num.toFixed(2) + '%';
        }

        function getChangeClass(value) {
            const num = parseFloat(value);
            if (num > 0) return 'price-change-positive';
            if (num < 0) return 'price-change-negative';
            return '';
        }

        function getAssetIcon(symbol) {
            return symbol.substring(0, 2).toUpperCase();
        }

        // Resto de tu c√≥digo original (fetchPortfolioAssets, renderPortfolioView, etc.)
        async function fetchPortfolioAssets() {
            try {
                const response = await fetch('/db/portfolio/assets/' + portfolioId);
                
                if (!response.ok) {
                    throw new Error('Error ' + response.status + ': Could not connect to the server');
                }
                
                const result = await response.json();
                
                if (result.success && result.data) {
                    portfolioData = result.data.portfolio;
                    assets = result.data.assets;
                    
                    await fetchAssetPrices(assets);
                    renderPortfolioView(result.data);
                } else {
                    throw new Error('Invalid data format in server response');
                }
            } catch (error) {
                renderError(error.message);
            }
        }

        async function fetchAssetPrices(assets) {
            const pricePromises = assets.map(async (asset) => {
                try {
                    const response = await fetch('/api/price/' + asset.asset_symbol);
                    if (response.ok) {
                        const priceData = await response.json();
                        assetPrices[asset.asset_symbol] = priceData;
                    }
                } catch (error) {
                    console.error('Error fetching price for ' + asset.asset_symbol + ':', error);
                }
            });
            
            await Promise.all(pricePromises);
        }

        function renderError(message) {
            document.getElementById('content').innerHTML = 
                '<div class="empty-state">' +
                    '<div class="empty-icon">‚ö†Ô∏è</div>' +
                    '<h3>Error loading portfolio</h3>' +
                    '<p>' + message + '</p>' +
                '</div>';
        }

        function renderPortfolioView(data) {
            const content = document.getElementById('content');
            
            let totalCurrentValue = 0;
            let totalGainLoss = 0;
            let dailyGainLoss = 0;
            
            // Calcular totales
            for (let i = 0; i < data.assets.length; i++) {
                const asset = data.assets[i];
                const priceData = assetPrices[asset.asset_symbol];
                
                if (priceData) {
                    const currentValue = asset.quantity * priceData.currentPrice;
                    const gainLoss = currentValue - asset.total_invested;
                    const dailyChange = asset.quantity * priceData.change;
                    
                    totalCurrentValue += currentValue;
                    totalGainLoss += gainLoss;
                    dailyGainLoss += dailyChange;
                } else {
                    totalCurrentValue += asset.total_invested;
                }
            }
            
            const totalGainLossPercent = data.total_value > 0 ? (totalGainLoss / data.total_value) * 100 : 0;
            const dailyGainLossPercent = totalCurrentValue > 0 ? (dailyGainLoss / totalCurrentValue) * 100 : 0;
            
            let assetsTableHTML = '';
            if (data.assets && data.assets.length > 0) {
                for (let i = 0; i < data.assets.length; i++) {
                    const asset = data.assets[i];
                    const priceData = assetPrices[asset.asset_symbol];
                    
                    let currentValue = asset.total_invested;
                    let gainLoss = 0;
                    let gainLossPercent = 0;
                    let portfolioPercent = (asset.total_invested / data.total_value) * 100;
                    
                    if (priceData) {
                        currentValue = asset.quantity * priceData.currentPrice;
                        gainLoss = currentValue - asset.total_invested;
                        gainLossPercent = ((currentValue - asset.total_invested) / asset.total_invested) * 100;
                        portfolioPercent = (currentValue / totalCurrentValue) * 100;
                    }

                    const symbol1 = asset.asset_symbol; // Usar el s√≠mbolo real
                   
                    
                    assetsTableHTML += 
                        '<tr class="table-row">' +
                            '<td class="table-cell">' +
                                '<div class="asset-info">' +
                                    '<div class="asset-icon">' + getAssetIcon(asset.asset_symbol) + '</div>' +
                                    '<div class="asset-details">' +
                                        '<h4>' + (priceData ? priceData.name : asset.asset_symbol) + '</h4>' +
                                        '<span>' + asset.asset_symbol + '</span>' +
                                    '</div>' +
                                '</div>' +
                            '</td>' +
                            '<td class="table-cell">' +
                                (priceData ? 
                                    '<div class="price-info">' +
                                        '<div class="current-price">' + formatCurrency(priceData.currentPrice) + '</div>' +
                                        '<div class="price-change ' + getChangeClass(priceData.changePercent) + '">' +
                                            formatCurrency(priceData.change) + ' (' + formatPercentage(priceData.changePercent) + ')' +
                                        '</div>' +
                                    '</div>'
                                : 
                                    '<div class="current-price">-</div>'
                                ) +
                            '</td>' +
                            '<td class="table-cell">' +
                                '<div class="quantity-info">' +
                                    '<div class="quantity-main">' + asset.quantity + ' stocks</div>' +
                                    '<div class="quantity-sub">Average purchase</div>' +
                                '</div>' +
                            '</td>' +
                            '<td class="table-cell value-cell">' + formatCurrency(currentValue) + '</td>' +
                            '<td class="table-cell percentage-cell">' + portfolioPercent.toFixed(1) + '%</td>' +
                            '<td class="table-cell gain-cell">' +
                                '<div class="gain-main ' + getChangeClass(gainLoss) + '">' + formatCurrency(gainLoss) + '</div>' +
                                '<div class="gain-percent ' + getChangeClass(gainLossPercent) + '">' + formatPercentage(gainLossPercent) + '</div>' +
                            '</td>' +
                            '<td class="table-cell actions-cell">' +
                                // ‚úÖ CORREGIDO: A√±adir comillas alrededor del s√≠mbolo
                                `<button class="action-btn btn-edit" onclick="buy('${symbol1}', ${asset.quantity})">Buy More</button>` +
                                `<button class="action-btn btn-sell" onclick="sell('${symbol1}', ${asset.quantity})">Sell</button>` +
                            '</td>' +
                        '</tr>';
                }
            }
            
            content.innerHTML = 
                '<div class="stats-grid">' +
                    '<div class="stat-card">' +
                        '<div class="stat-label">Total Value</div>' +
                        '<div class="stat-value">' + formatCurrency(totalCurrentValue) + '</div>' +
                        '<div class="stat-change ' + getChangeClass(totalGainLoss) + '">' + 
                            formatCurrency(totalGainLoss) + ' (' + formatPercentage(totalGainLossPercent) + ')' +
                        '</div>' +
                    '</div>' +
                    '<div class="stat-card">' +
                        '<div class="stat-label">Daily Profit/Loss</div>' +
                        '<div class="stat-value ' + getChangeClass(dailyGainLoss) + '">' + formatCurrency(dailyGainLoss) + '</div>' +
                        '<div class="stat-change ' + getChangeClass(dailyGainLossPercent) + '">' + formatPercentage(dailyGainLossPercent) + ' today</div>' +
                    '</div>' +
                    '<div class="stat-card">' +
                        '<div class="stat-label">Total Invested</div>' +
                        '<div class="stat-value">' + formatCurrency(data.total_value) + '</div>' +
                        '<div class="stat-change neutral">Initial capital</div>' +
                    '</div>' +
                    '<div class="stat-card">' +
                        '<div class="stat-label">Total Performance</div>' +
                        '<div class="stat-value ' + getChangeClass(totalGainLossPercent) + '">' + formatPercentage(totalGainLossPercent) + '</div>' +
                        '<div class="stat-change neutral">From the beginning</div>' +
                    '</div>' +
                    '<div class="stat-card">' +
                        '<div class="stat-label">Number of Positions</div>' +
                        '<div class="stat-value">' + data.count + '</div>' +
                        '<div class="stat-change neutral">Different assets</div>' +
                    '</div>' +
                '</div>' +
                
                '<div class="investments-section">' +
                    '<div class="section-header">' +
                        '<h2 class="section-title">My Investments</h2>' +
                    '</div>' +
                    (data.assets && data.assets.length > 0 ?
                        '<div class="table-container">' +
                            '<table class="investments-table">' +
                                '<thead class="table-header">' +
                                    '<tr>' +
                                        '<th>Asset</th>' +
                                        '<th>Current Price</th>' +
                                        '<th>Quantity</th>' +
                                        '<th>Total Value</th>' +
                                        '<th>% Portfolio</th>' +
                                        '<th>Profit/Loss</th>' +
                                        '<th>Actions</th>' +
                                    '</tr>' +
                                '</thead>' +
                                '<tbody>' +
                                    assetsTableHTML +
                                '</tbody>' +
                            '</table>' +
                        '</div>'
                    :
                        '<div class="empty-state">' +
                            '<div class="empty-icon">üìà</div>' +
                            '<h3>There are no investments</h3>' +
                            '<p>Add your first investment to get started</p>' +
                        '</div>'
                    ) +
                '</div>';
        }

        // Inicializar
        fetchPortfolioAssets();
    </script>

    <script src="/scripts/menu.js"></script>
</body>
</html>